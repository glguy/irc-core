# This GitHub workflow config has been generated by a script via
#
#   haskell-ci 'github' '--distribution' 'jammy' '--jobs-selection' 'any' '--submodules' 'cabal.project'
#
# To regenerate the script (for example after adjusting tested-with) run
#
#   haskell-ci regenerate
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.17.20231203
#
# REGENDATA ("0.17.20231203",["github","--distribution","jammy","--jobs-selection","any","--submodules","cabal.project"])
#
name: Haskell-CI
on:
  - push
  - pull_request
jobs:
  linux:
    name: Haskell-CI - Linux - ${{ matrix.compiler }}
    runs-on: ubuntu-20.04
    timeout-minutes:
      60
    container:
      image: buildpack-deps:jammy
    continue-on-error: ${{ matrix.allow-failure }}
    strategy:
      matrix:
        include:
          - compiler: ghc-9.8.1
            compilerKind: ghc
            compilerVersion: 9.8.1
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.4.7
            compilerKind: ghc
            compilerVersion: 9.4.7
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.0.2
            compilerKind: ghc
            compilerVersion: 9.0.2
            setup-method: ghcup
            allow-failure: false
      fail-fast: false
    steps:
      - name: apt
        run: |
          apt-get update
          apt-get install -y --no-install-recommends gnupg ca-certificates dirmngr curl git software-properties-common libtinfo5
          if [ "${{ matrix.setup-method }}" = ghcup ]; then
            mkdir -p "$HOME/.ghcup/bin"
            curl -sL https://downloads.haskell.org/ghcup/0.1.20.0/x86_64-linux-ghcup-0.1.20.0 > "$HOME/.ghcup/bin/ghcup"
            chmod a+x "$HOME/.ghcup/bin/ghcup"
            "$HOME/.ghcup/bin/ghcup" install ghc "$HCVER" || (cat "$HOME"/.ghcup/logs/*.* && false)
            "$HOME/.ghcup/bin/ghcup" install cabal 3.10.2.0 || (cat "$HOME"/.ghcup/logs/*.* && false)
          else
            apt-add-repository -y 'ppa:hvr/ghc'
            apt-get update
            apt-get install -y "$HCNAME"
            mkdir -p "$HOME/.ghcup/bin"
            curl -sL https://downloads.haskell.org/ghcup/0.1.20.0/x86_64-linux-ghcup-0.1.20.0 > "$HOME/.ghcup/bin/ghcup"
            chmod a+x "$HOME/.ghcup/bin/ghcup"
            "$HOME/.ghcup/bin/ghcup" install cabal 3.10.2.0 || (cat "$HOME"/.ghcup/logs/*.* && false)
          fi
        env:
          HCKIND: ${{ matrix.compilerKind }}
          HCNAME: ${{ matrix.compiler }}
          HCVER: ${{ matrix.compilerVersion }}
      - name: Set PATH and environment variables
        run: |
          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
          echo "LANG=C.UTF-8" >> "$GITHUB_ENV"
          echo "CABAL_DIR=$HOME/.cabal" >> "$GITHUB_ENV"
          echo "CABAL_CONFIG=$HOME/.cabal/config" >> "$GITHUB_ENV"
          HCDIR=/opt/$HCKIND/$HCVER
          if [ "${{ matrix.setup-method }}" = ghcup ]; then
            HC=$("$HOME/.ghcup/bin/ghcup" whereis ghc "$HCVER")
            HCPKG=$(echo "$HC" | sed 's#ghc$#ghc-pkg#')
            HADDOCK=$(echo "$HC" | sed 's#ghc$#haddock#')
            echo "HC=$HC" >> "$GITHUB_ENV"
            echo "HCPKG=$HCPKG" >> "$GITHUB_ENV"
            echo "HADDOCK=$HADDOCK" >> "$GITHUB_ENV"
            echo "CABAL=$HOME/.ghcup/bin/cabal-3.10.2.0 -vnormal+nowrap" >> "$GITHUB_ENV"
          else
            HC=$HCDIR/bin/$HCKIND
            echo "HC=$HC" >> "$GITHUB_ENV"
            echo "HCPKG=$HCDIR/bin/$HCKIND-pkg" >> "$GITHUB_ENV"
            echo "HADDOCK=$HCDIR/bin/haddock" >> "$GITHUB_ENV"
            echo "CABAL=$HOME/.ghcup/bin/cabal-3.10.2.0 -vnormal+nowrap" >> "$GITHUB_ENV"
          fi

          HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\d+)\.(\d+)\.(\d+)(\.(\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')
          echo "HCNUMVER=$HCNUMVER" >> "$GITHUB_ENV"
          echo "ARG_TESTS=--enable-tests" >> "$GITHUB_ENV"
          echo "ARG_BENCH=--enable-benchmarks" >> "$GITHUB_ENV"
          echo "HEADHACKAGE=false" >> "$GITHUB_ENV"
          echo "ARG_COMPILER=--$HCKIND --with-compiler=$HC" >> "$GITHUB_ENV"
          echo "GHCJSARITH=0" >> "$GITHUB_ENV"
        env:
          HCKIND: ${{ matrix.compilerKind }}
          HCNAME: ${{ matrix.compiler }}
          HCVER: ${{ matrix.compilerVersion }}
      - name: env
        run: |
          env
      - name: write cabal config
        run: |
          mkdir -p $CABAL_DIR
          cat >> $CABAL_CONFIG <<EOF
          remote-build-reporting: anonymous
          write-ghc-environment-files: never
          remote-repo-cache: $CABAL_DIR/packages
          logs-dir:          $CABAL_DIR/logs
          world-file:        $CABAL_DIR/world
          extra-prog-path:   $CABAL_DIR/bin
          symlink-bindir:    $CABAL_DIR/bin
          installdir:        $CABAL_DIR/bin
          build-summary:     $CABAL_DIR/logs/build.log
          store-dir:         $CABAL_DIR/store
          install-dirs user
            prefix: $CABAL_DIR
          repository hackage.haskell.org
            url: http://hackage.haskell.org/
          EOF
          cat >> $CABAL_CONFIG <<EOF
          program-default-options
            ghc-options: $GHCJOBS +RTS -M3G -RTS
          EOF
          cat $CABAL_CONFIG
      - name: versions
        run: |
          $HC --version || true
          $HC --print-project-git-commit-id || true
          $CABAL --version || true
      - name: update cabal index
        run: |
          $CABAL v2-update -v
      - name: install cabal-plan
        run: |
          mkdir -p $HOME/.cabal/bin
          curl -sL https://github.com/haskell-hvr/cabal-plan/releases/download/v0.7.3.0/cabal-plan-0.7.3.0-x86_64-linux.xz > cabal-plan.xz
          echo 'f62ccb2971567a5f638f2005ad3173dba14693a45154c1508645c52289714cb2  cabal-plan.xz' | sha256sum -c -
          xz -d < cabal-plan.xz > $HOME/.cabal/bin/cabal-plan
          rm -f cabal-plan.xz
          chmod a+x $HOME/.cabal/bin/cabal-plan
          cabal-plan --version
      - name: checkout
        uses: actions/checkout@v3
        with:
          path: source
          submodules: "true"
      - name: initial cabal.project for sdist
        run: |
          touch cabal.project
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "packages: $GITHUB_WORKSPACE/source/lib" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "packages: $GITHUB_WORKSPACE/source/hookup" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "packages: $GITHUB_WORKSPACE/source/bot" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "packages: $GITHUB_WORKSPACE/source/." >> cabal.project ; fi
          if [ $((HCNUMVER < 90000)) -ne 0 ] ; then echo "packages: $GITHUB_WORKSPACE/source/config-schema" >> cabal.project ; fi
          if [ $((HCNUMVER < 90002)) -ne 0 ] ; then echo "packages: $GITHUB_WORKSPACE/source/config-value" >> cabal.project ; fi
          cat cabal.project
      - name: sdist
        run: |
          mkdir -p sdist
          $CABAL sdist all --output-dir $GITHUB_WORKSPACE/sdist
      - name: unpack
        run: |
          mkdir -p unpacked
          find sdist -maxdepth 1 -type f -name '*.tar.gz' -exec tar -C $GITHUB_WORKSPACE/unpacked -xzvf {} \;
      - name: generate cabal.project
        run: |
          PKGDIR_irc_core="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/irc-core-[0-9.]*')"
          echo "PKGDIR_irc_core=${PKGDIR_irc_core}" >> "$GITHUB_ENV"
          PKGDIR_hookup="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/hookup-[0-9.]*')"
          echo "PKGDIR_hookup=${PKGDIR_hookup}" >> "$GITHUB_ENV"
          PKGDIR_irc_core_bot="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/irc-core-bot-[0-9.]*')"
          echo "PKGDIR_irc_core_bot=${PKGDIR_irc_core_bot}" >> "$GITHUB_ENV"
          PKGDIR_glirc="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/glirc-[0-9.]*')"
          echo "PKGDIR_glirc=${PKGDIR_glirc}" >> "$GITHUB_ENV"
          PKGDIR_config_schema="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/config-schema-[0-9.]*')"
          echo "PKGDIR_config_schema=${PKGDIR_config_schema}" >> "$GITHUB_ENV"
          PKGDIR_config_value="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/config-value-[0-9.]*')"
          echo "PKGDIR_config_value=${PKGDIR_config_value}" >> "$GITHUB_ENV"
          rm -f cabal.project cabal.project.local
          touch cabal.project
          touch cabal.project.local
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "packages: ${PKGDIR_irc_core}" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "packages: ${PKGDIR_hookup}" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "packages: ${PKGDIR_irc_core_bot}" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "packages: ${PKGDIR_glirc}" >> cabal.project ; fi
          if [ $((HCNUMVER < 90000)) -ne 0 ] ; then echo "packages: ${PKGDIR_config_schema}" >> cabal.project ; fi
          if [ $((HCNUMVER < 90002)) -ne 0 ] ; then echo "packages: ${PKGDIR_config_value}" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "package irc-core" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "package hookup" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "package irc-core-bot" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "package glirc" >> cabal.project ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200 && HCNUMVER < 90000)) -ne 0 ] ; then echo "package config-schema" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200 && HCNUMVER < 90000)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200 && HCNUMVER < 90002)) -ne 0 ] ; then echo "package config-value" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200 && HCNUMVER < 90002)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          cat >> cabal.project <<EOF
          EOF
          $HCPKG list --simple-output --names-only | perl -ne 'for (split /\s+/) { print "constraints: $_ installed\n" unless /^(config-schema|config-value|glirc|hookup|irc-core|irc-core-bot)$/; }' >> cabal.project.local
          cat cabal.project
          cat cabal.project.local
      - name: dump install plan
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dry-run all
          cabal-plan
      - name: restore cache
        uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ github.sha }}
          path: ~/.cabal/store
          restore-keys: ${{ runner.os }}-${{ matrix.compiler }}-
      - name: install dependencies
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dependencies-only -j2 all
      - name: build w/o tests
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: build
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --write-ghc-environment-files=always
      - name: tests
        run: |
          $CABAL v2-test $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --test-show-details=direct
      - name: cabal check
        run: |
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then cd ${PKGDIR_irc_core} || false ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then ${CABAL} -vnormal check ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then cd ${PKGDIR_hookup} || false ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then ${CABAL} -vnormal check ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then cd ${PKGDIR_irc_core_bot} || false ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then ${CABAL} -vnormal check ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then cd ${PKGDIR_glirc} || false ; fi
          if [ $((HCNUMVER >= 90002)) -ne 0 ] ; then ${CABAL} -vnormal check ; fi
          if [ $((HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_config_schema} || false ; fi
          if [ $((HCNUMVER < 90000)) -ne 0 ] ; then ${CABAL} -vnormal check ; fi
          if [ $((HCNUMVER < 90002)) -ne 0 ] ; then cd ${PKGDIR_config_value} || false ; fi
          if [ $((HCNUMVER < 90002)) -ne 0 ] ; then ${CABAL} -vnormal check ; fi
      - name: haddock
        run: |
          $CABAL v2-haddock --disable-documentation --haddock-all $ARG_COMPILER --with-haddock $HADDOCK $ARG_TESTS $ARG_BENCH all
      - name: unconstrained build
        run: |
          rm -f cabal.project.local
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: save cache
        uses: actions/cache/save@v3
        if: always()
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ github.sha }}
          path: ~/.cabal/store
